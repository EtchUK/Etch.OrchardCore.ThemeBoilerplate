resources:
  - repo: self

trigger:
  tags:
    include:
      - "*"
  branches:
    include:
      - master

variables:
  buildConfiguration: "Release"

stages:
  - stage: build
    displayName: Build
    variables:
      - group: "Global"
    jobs:
      - job: Build
        pool:
          vmImage: "windows-latest"
        steps:
          - task: CmdLine@2
            displayName: "Install template"
            inputs:
              script: "dotnet new -i ./"

          - task: CmdLine@2
            displayName: "Create new theme via template"
            inputs:
              script: 'dotnet new orchardcore-themeboilerplate -n Etch.OrchardCore.DefaultTheme -o "$(Build.ArtifactStagingDirectory)/Etch.OrchardCore.DefaultTheme" -au "Etch UK Ltd." -d "Default boilerplate theme." -t "Default Theme" -w "https://etchuk.com"'

          - task: CmdLine@2
            displayName: "Compile front-end assets"
            inputs:
              script: "npm run build"
              workingDirectory: $(Build.ArtifactStagingDirectory)/Etch.OrchardCore.DefaultTheme

          - task: DotNetCoreCLI@2
            displayName: "Build theme"
            inputs:
              workingDirectory: $(Build.ArtifactStagingDirectory)/Etch.OrchardCore.DefaultTheme
              arguments: "-c $(BuildConfiguration)"

          - task: CmdLine@2
            displayName: "Package theme"
            inputs:
              script: "dotnet pack -c $(BuildConfiguration) -o $(Build.ArtifactStagingDirectory)/drop --no-build"
              workingDirectory: $(Build.ArtifactStagingDirectory)/Etch.OrchardCore.DefaultTheme

          - task: PublishPipelineArtifact@0
            displayName: "Publish pipeline artifact"
            inputs:
              targetPath: "$(Build.ArtifactStagingDirectory)/drop"

  - stage: publish
    displayName: NuGet Publish
    dependsOn: build
    condition: and(succeeded(), startsWith(variables['build.sourceBranch'], 'refs/tags/'))
    jobs:
      - job: Publish
        pool:
          vmImage: "windows-latest"
        steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              source: "current"
              path: "$(Pipeline.Workspace)"
          - task: NuGetCommand@2
            displayName: "NuGet push"
            inputs:
              command: push
              packagesToPush: "$(Pipeline.Workspace)/**/drop/*.nupkg"
              nuGetFeedType: external
              publishFeedCredentials: "NuGet"
