/* ==========================================================================
   #HERO/DEFAULT
   ========================================================================== */

@use "sass-mq/mq";

/*
 * 1. The rough space of a spacebar push, ensures that despite liquid output,
 *    anything with a span wrapped is appropriately spaced to the next item
 * 2. Vertically center the embed if it is taller than .hero__media
 */

@use "sass:math";

.hero {
    align-items: center;
    display: flex;
    justify-content: center;
    position: relative;

    background: var(--heroBackgroundColor);

    color: var(--heroColor);

    overflow: hidden;

    &__body {
        position: absolute;
        padding: var(--heroBodyPadding) 0;
        z-index: var(--zIndexNudgeForward);

        .hero--encourage-scrolling & {
            padding-bottom: calc(
                var(--heroBodyPadding) + var(--heroScrollIndicatorHeight) +
                    var(--heroScrollIndicatorBottom)
            );
        }

        @each $width in $widths {
            .width--#{math.floor($width)} & {
                padding-left: var(--heroBodyPadding);
                padding-right: var(--heroBodyPadding);
            }
        }
    }

    &__meta {
        display: block;
        margin-bottom: var(--spacingLarge);
        color: var(--colorTextLight);
        font-family: var(--fontFamilyHeading);
        font-weight: var(--cardMetaWeight);
        text-transform: var(--cardMetaTextTransform);

        &:last-child {
            margin-bottom: 0;
        }

        span {
            margin-left: 0.2em; /* 1 */
        }

        a {
            color: var(--colorTextLight);
        }
    }

    &__media,
    .hero-responsive-media--background-image {
        align-items: center; /* 2. */
        display: flex;
        justify-content: center;
        left: 50%;
        min-height: 100%;
        min-width: 100%;
        position: absolute;
        top: 50%;
        transform: translate(-50%, -50%);
        width: auto;

        overflow: hidden;

        .embed {
            margin-bottom: 0;
            position: absolute;
            width: 100%;

            @include mq.mq($from: desktopSmall) {
                position: relative;
            }

            &__source {
                margin-bottom: 0;
            }
        }

        img {
            height: 100%;
            left: 50%;
            max-width: none;
            min-width: 100%;
            position: absolute;
            top: 50%;
            transform: translate(-50%, -50%);
        }
    }

    &__space {
        height: 0;
        width: 100%;

        pointer-events: none;
    }

    h1,
    h2,
    h3,
    h4,
    h5 {
        margin-bottom: var(--heroHeadingMarginBottom);
    }

    h1,
    h2 {
        text-transform: var(--heroHeadingTextTransform);
    }

    &__scroll-encouragement {
        border: 0;
        bottom: var(--heroScrollIndicatorBottom);
        height: var(--heroScrollIndicatorHeight);
        left: 50%;
        margin-left: calc(var(--heroScrollIndicatorWidth) / 2 * -1);
        position: absolute;
        width: var(--heroScrollIndicatorWidth);

        background: url("../content/icon-chevron.svg") 0 0 no-repeat transparent;
        background-size: var(--heroScrollIndicatorWidth)
            var(--heroScrollIndicatorHeight);

        animation: bounceThrice var(--heroScrollIndicatorAnimationDuration)
            var(--animationTiming) forwards;
        animation-delay: var(--heroScrollIndicatorAnimationDelay);
        cursor: pointer;
        z-index: var(--zIndexNudgeForward);

        .hero--inverted & {
            background-image: url("../content/icon-chevron-inverted.svg");
        }
    }
}

@keyframes bounceThrice {
    0% {
        transform: translateY(0);
    }
    16% {
        transform: translateY(var(--heroScrollIndicatorAnimationDistance));
    }
    33% {
        transform: translateY(0);
    }
    50% {
        transform: translateY(var(--heroScrollIndicatorAnimationDistance));
    }
    66% {
        transform: translateY(0);
    }
    83% {
        transform: translateY(var(--heroScrollIndicatorAnimationDistance));
    }
    100% {
        transform: translateY(0);
    }
}
