@inject IOptions<AutorouteOptions> AutorouteOptions

@using Microsoft.Extensions.Options;
@using Microsoft.AspNetCore.Routing;
@using OrchardCore.ContentManagement
@using OrchardCore.ContentManagement.Routing;
@using OrchardCore.Menu.Models

@{
    ContentItem contentItem = Model.ContentItem;
    var menuItemPart = contentItem.As<ContentMenuItemPart>();
    var routeValues = new RouteValueDictionary(AutorouteOptions.Value.GlobalRouteValues);
    routeValues[AutorouteOptions.Value.ContentItemIdKey] = menuItemPart.ContentItem.Content.ContentMenuItemPart.SelectedContentItem.ContentItemIds[0];
    var linkUrl = Url.RouteUrl(routeValues);
    var currentPageUrl = FullRequestPath;
}

@{
    var cssClasses = "";

    if (linkUrl.Equals(currentPageUrl, StringComparison.OrdinalIgnoreCase)) {
        cssClasses = cssClasses + " is-current-page";
    }

    if (Model.HasItems) {
        cssClasses = cssClasses + " js-nav-parent-link";
    }
}

<a href="@linkUrl" class="@cssClasses" @Html.Raw(Model.HasItems ? "aria-haspopup=\"true\" aria-expanded=\"false\"":string.Empty)>
    @menuItemPart.Name
</a>
